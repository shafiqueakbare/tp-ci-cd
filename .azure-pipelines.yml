trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main
      - feature/*

# Utilise l’agent auto-hébergé installé sur ta VM
pool:
  name: Default

stages:
- stage: CI
  displayName: "Terraform CI (dev & prod)"
  jobs:
  - job: terraform_ci
    displayName: "fmt, validate, plan"
    steps:
    - checkout: self

    # Étape 1 — Installation de Terraform
    - task: Bash@3
      displayName: "Install Terraform 1.9.5"
      inputs:
        targetType: inline
        script: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y wget unzip
          TF_VERSION=1.9.5
          wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          unzip terraform_${TF_VERSION}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/terraform
          terraform -version

    # Étape 2 — Vérification du format du code
    - script: |
        echo "Vérification du format Terraform..."
        terraform fmt -recursive -check
      displayName: "terraform fmt -check"

    # Étape 3 — Validation de la configuration
    - script: |
        echo "Validation des fichiers Terraform..."
        terraform init -backend=false -input=false
        terraform validate
      displayName: "terraform init (no backend) & validate"

    # Étape 4 — Planification pour dev et prod
    - script: |
        echo "=== PLAN DEV ==="
        terraform plan -input=false -refresh=false -no-color \
          -var-file=envs/dev.tfvars -out=tfplan-dev
        echo "=== PLAN PROD ==="
        terraform plan -input=false -refresh=false -no-color \
          -var-file=envs/prod.tfvars -out=tfplan-prod
      displayName: "terraform plan (dev & prod)"
      continueOnError: true

    # Étape 5 — Publication des plans en artefacts
    - task: PublishBuildArtifacts@1
      displayName: "Publish plan artifacts"
      inputs:
        pathtoPublish: '.'
        artifactName: 'tfplans'
      condition: succeededOrFailed()